<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="customerService" class="com.renjing.service.impl.CustomerServiceImpl"></bean>

    <!--基于xml的aop配置-->
    <!--把通知类交给Spring来管理-->
    <bean id="logger" class="com.renjing.utils.Logger"></bean>
    <aop:config>

        <!--定义通用的切入点表达式，如果写在aop:aspect标签外部，则表示所有切面可用-->
        <aop:pointcut id="pt1" expression="execution(* com.renjing.service.impl.*.*(..))"></aop:pointcut>

        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置前置通知：永远在切入点方法执行之前执行
            <aop:before method="beforePrintLog" pointcut="execution(public void com.renjing.service.impl.CustomerServiceImpl.saveCustomer())"></aop:before>
            配置后置通知：切入点方法正常执行之后执行
            <aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>
            配置异常通知：切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个
            <aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>
            配置最终通知：无论切入点方法是否正常执行，它都会在其后面执行
            <aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>